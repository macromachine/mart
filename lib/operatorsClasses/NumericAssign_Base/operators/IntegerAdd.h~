#ifndef __KLEE_SEMU_GENMU_operatorClasses__IntegerAdd__
#define __KLEE_SEMU_GENMU_operatorClasses__IntegerAdd__

/**
 * -==== IntegerAdd.h
 *
 *                LLGenMu LLVM Mutation Tool
 *
 * This file is distributed under the University of Illinois Open Source
 * License. See LICENSE.TXT for details. 
 *  
 * \brief     Matching and replacement mutation operator for Integer ADD.
 * \details   This abstract class define is extended from the @see NumericExpression_Base class. 
 */
 
#include "../NumericArithBinopAndAssign_Base.h"

class IntegerAdd: public NumericArithBinopAndAssign_Base
{
  protected:
    /**
     * \brief Implement from @see NumericArithBinopAndAssign_Base
     */
    inline unsigned getMyInstructionIROpCode()
    {  
        return llvm::Instruction::Add;
    }
    
    /**
     * \brief Implement from @see NumericArithBinopAndAssign_Base
     */
    inline bool checkOperandCPTypes(llvm::Instruction *valInst, llvmMutationOp const &mutationOp)
    {
        if (! valInst->getType()->isIntegerTy() || ! checkCPTypeInIR (mutationOp.getCPType(1), binOrStore->getOperand(0)))
            return false;
        for (auto oprdID=0; oprdID < valInst->getNumOperands(); oprdID++)
        {
            if (! checkCPTypeInIR (mutationOp.getCPType(oprdID), valInst->getOperand(oprdID)))
                return false;
        }
        return true;
    }
    
    /**
     * \brief Implement from @see NumericArithBinopAndAssign_Base
     */
    inline bool isReverseOprds() 
    {
        return false;
    }
};

#endif //__KLEE_SEMU_GENMU_operatorClasses__IntegerAdd__
