add(@1,@2) --> OP1,operand(@1); OP2,operand(@2); ADD-SUB,sub(@1,@2); 
sub(@1,@2) --> OP1,operand(@1); OP2,operand(@2); SUB-ADD,add(@1,@2); 
assign(V,@) --> ASSIGN2ADD,add(v,@); ASSIGN2Const+@, add(99,@);
add(V,@) --> ADD2ASSIGN,assign(V,@); ASSIGN2Const+@, add(99,@);
STMT --> DEL-STMT,delstmt();
C --> CONST+ONE,add(C,1); CONST-ONE,add(C,-1); CONST2ADDZERO,add(0,0); CONST2BITNOT,bitnot(C);CONST2NEG,neg(C);

mod(@1,@2) --> OP1,operand(@1); OP2,operand(@2); MOD-MUL,mul(@1,@2); MOD-DIV,div(@1,@2); 
div(@1,@2) --> OP1,operand(@1); OP2,operand(@2); DIV-MUL,mul(@1,@2); DIV-MOD,mod(@1,@2);
mul(@1,@2) --> OP1,operand(@1); OP2,operand(@2); MUL-MOD,mod(@1,@2); MUL-DIV,div(@1,@2);

bitand(@1,@2) --> OP1,operand(@1); OP2,operand(@2); BAND-BOR,bitor(@1,@2); BAND-BXOR,bitxor(@1,@2); BAND-BSHL, bitshl(@1,@1); BAND-BSHR, bitshr(@1,@2);
bitor(@1,@2) --> OP1,operand(@1); OP2,operand(@2); BOR-BAND,bitand(@1,@2); BOR-BXOR,bitxor(@1,@2); BOR-BSHL, bitshl(@1,@1); BOR-BSHR, bitshr(@1,@2);
bitxor(@1,@2) --> OP1,operand(@1); OP2,operand(@2); BXOR-BOR,bitor(@1,@2); BXOR-BAND,bitand(@1,@2); BXOR-BSHL, bitshl(@1,@1); BXOR-BSHR, bitshr(@1,@2);
bitshl(@1,@2) --> OP1,operand(@1); OP2,operand(@2); BSHL-BOR,bitor(@1,@2); BSHL-BAND,bitand(@1,@2); BSHL-BXOR, bitxor(@1,@1); BSHL-BSHR, bitshr(@1,@2);
bitshr(@1,@2) --> OP1,operand(@1); OP2,operand(@2); BSHR-BOR,bitor(@1,@2); BSHR-BAND,bitand(@1,@2); BSHR-BSHL, bitshl(@1,@1); BSHR-BXOR, bitxor(@1,@2);

leftinc(V) --> OP1,operand(V);LINC-RINC,rightinc(V); LINC-RDEC,rightdec(V); LINC-LDEC,leftdec(V);  xxx,add(V,8);
leftdec(V) --> OP1,operand(V);LDEC-RINC,rightinc(V); LDEC-RDEC,rightdec(V); LDEC-LINC,leftinc(V); xxx,add(V,8);
rightinc(V) --> OP1,operand(V);RINC-LINC,leftinc(V); RINC-RDEC,rightdec(V); RINC-LDEC,leftdec(V); xxx,add(V,8);
rightdec(V) --> OP1,operand(V);RDEC-RINC,rightinc(V); RDEC-LINC,leftinc(V); RDEC-LDEC,leftdec(V); xxx,add(V,8);

neg(@) --> neg2abs, operand(@);

eq(@1,@2) --> OP1,operand(@1); EQ-LT,lt(@1,@2); xxx,sub(@1,8);
lt(@1,@2) --> OP1,operand(@1); LT-LE,le(@1,@2);
gt(@1,@2) --> OP2,operand(@2); GT-NEQ,neq(@2,@1);

and(@1, @2) --> andor, or(@1, @2); OP1,operand(@1);
or(@1, @2) --> orand, and(@1, @2);

@ --> exp-abs, abs(@); #toZero, 0;

call --> callgTocallf, newcallee(callg, callf);
